results
setwd("~/Documents/Doc-perso-2023/Job-Valeo/evops-project/extreme-value-operations")
source("./src/generate_gev_sample.R")
source("./src/estimate_single_ns_gev_model.R")
n <- 1000
x <- generate_gev_sample(n = n, loc = 1, scale = 0.5, shape = +0.2)
single_ns_gev_model <- estimate_single_ns_gev_model(x,
block_size = 1,
data = NULL,
location.fun = ~1,
scale.fun = ~1,
shape.fun = ~1,
use.phi = TRUE,
type = c("GEV", "Gumbel")[1],
method = c("MLE", "GMLE")[1])
names(single_ns_gev_model)
results <- get_provided_covariates(single_ns_gev_model = single_ns_gev_model, covariates = NULL)
results
get_provided_covariates <- function(single_ns_gev_model, covariates = NULL){
# single_ns_gev_model: an object associated with a result of the function "estimate_single_ns_gev_model()"
# covariates: a named list whose names match the fitted model parameter names
if (single_ns_gev_model$gev_model$const.loc &
single_ns_gev_model$gev_model$const.scale &
single_ns_gev_model$gev_model$const.shape){
stop("Please enter a proper non-stationary model in the object: single_ns_gev_model!")
}
else{
if (is.null(covariates)){
stop("Please enter appropriate information in the argument: covariates!")
}
else{
# create an empty output object
output <- list()
# extract the estimated non-stationary gev model
ns_gev_model <- single_ns_gev_model$gev_model
# extract the data frame of all covariates
data <- single_ns_gev_model$covariates
# get the names of useful covariates in each parameter
gev_model_covariates_list <- ns_gev_model$par.models$term.names
# get the names of useful covariates in the location parameter
gev_model_covariates_list_location <- gev_model_covariates_list$location
gev_model_covariates_list_location <- ifelse(test = is.element(el = ".", set = gev_model_covariates_list_location),
yes = names(data),
no = gev_model_covariates_list_location)
# get the names of useful covariates in the scale parameter
gev_model_covariates_list_scale <- gev_model_covariates_list$scale
gev_model_covariates_list_scale <- ifelse(test = is.element(el = ".", set = gev_model_covariates_list_scale),
yes = names(data),
no = gev_model_covariates_list_scale)
# get the names of useful covariates in the shape parameter
gev_model_covariates_list_shape <- gev_model_covariates_list$shape
gev_model_covariates_list_shape <- ifelse(test = is.element(el = ".", set = gev_model_covariates_list_shape),
yes = names(data),
no = gev_model_covariates_list_shape)
# get the names of useful covariates in the model
gev_model_covariates_vector <- unique(c(gev_model_covariates_list_location,
gev_model_covariates_list_scale,
gev_model_covariates_list_shape))
# extract the data frame of useful covariates in the model
used_gev_model_covariates <- data[, gev_model_covariates_vector]
# get the vector of provided parameter coefficients
qcov <- extRemes::make.qcov(x = ns_gev_model, vals = covariates)
covariates_vector <- qcov[1, ]
# get the names of gev model parameters
covariates_vector_names <- names(covariates_vector)
# get the names of parameters associated with the location
covariate_location_positions <- stringr::str_detect(string = covariates_vector_names,
pattern  = "mu",
negate = FALSE)
covariate_location_names <- covariates_vector_names[covariate_location_positions]
# get the names of parameters associated with the scale
covariate_scale_positions_1 <- stringr::str_detect(string = covariates_vector_names,
pattern  = "sigma",
negate = FALSE)
covariate_scale_positions_2 <- stringr::str_detect(string = covariates_vector_names,
pattern  = "phi",
negate = FALSE)
covariate_scale_positions <- covariate_scale_positions_1 | covariate_scale_positions_2
covariate_scale_names <- covariates_vector_names[covariate_scale_positions]
# get the names of parameters associated with the shape
covariate_shape_positions <- stringr::str_detect(string = covariates_vector_names,
pattern  = "xi",
negate = FALSE)
covariate_shape_names <- covariates_vector_names[covariate_shape_positions]
# collect the provided covariates
provided_gev_model_covariates <- used_gev_model_covariates[1, ]
provided_gev_model_covariates[, gev_model_covariates_list_location] <- covariates_vector[covariate_location_names][-1]
provided_gev_model_covariates[, gev_model_covariates_list_scale] <- covariates_vector[covariate_scale_names][-1]
provided_gev_model_covariates[, gev_model_covariates_list_shape] <- covariates_vector[covariate_shape_names][-1]
# update the output object
output[["used_gev_model_covariates"]] <- used_gev_model_covariates
output[["provided_gev_model_covariates"]] <- provided_gev_model_covariates
output
}
}
}
results
