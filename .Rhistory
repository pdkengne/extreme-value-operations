uppers,
weights,
kind = c("geometric", "arithmetic")[2])
support <- c(results_1, results_2)
plot(x = x,
y = results_1,
ylim = range(support),
type = "l",
col = 6,
main = "mixture model density plot",
xlab = "support",
ylab = "density")
lines(x, results_2, type = "l", col = 7)
legend("topleft", legend = c("geometric", "arithmetic"), col = c(6, 7), lty = c(1, 1))
shapes1 <- c(5, 3)
lowers <- rep(0, times = p)
uppers <- rep(1, times = p)
x <- sort(runif(n = 500))
results_1 <- calculate_nsbeta_mixture_model_pdf(x = x,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[1])
results_2 <- calculate_nsbeta_mixture_model_pdf(x = x,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[2])
support <- c(results_1, results_2)
plot(x = x,
y = results_1,
ylim = range(support),
type = "l",
col = 6,
main = "mixture model density plot",
xlab = "support",
ylab = "density")
lines(x, results_2, type = "l", col = 7)
legend("topleft", legend = c("geometric", "arithmetic"), col = c(6, 7), lty = c(1, 1))
shapes2 <- c(2, 2)
shapes1 <- c(5, 2)
lowers <- rep(0, times = p)
uppers <- rep(1, times = p)
x <- sort(runif(n = 500))
results_1 <- calculate_nsbeta_mixture_model_pdf(x = x,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[1])
results_2 <- calculate_nsbeta_mixture_model_pdf(x = x,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[2])
support <- c(results_1, results_2)
plot(x = x,
y = results_1,
ylim = range(support),
type = "l",
col = 6,
main = "mixture model density plot",
xlab = "support",
ylab = "density")
lines(x, results_2, type = "l", col = 7)
legend("topleft", legend = c("geometric", "arithmetic"), col = c(6, 7), lty = c(1, 1))
p <- 3
p <- 3
weights <- c(1/3, 1/3, 1/3)
shapes2 <- c(2, 2, 3)
shapes1 <- c(5, 2, 1)
lowers <- rep(0, times = p)
uppers <- rep(1, times = p)
x <- sort(runif(n = 500))
results_1 <- calculate_nsbeta_mixture_model_pdf(x = x,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[1])
results_2 <- calculate_nsbeta_mixture_model_pdf(x = x,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[2])
support <- c(results_1, results_2)
plot(x = x,
y = results_1,
ylim = range(support),
type = "l",
col = 6,
main = "mixture model density plot",
xlab = "support",
ylab = "density")
lines(x, results_2, type = "l", col = 7)
legend("topleft", legend = c("geometric", "arithmetic"), col = c(6, 7), lty = c(1, 1))
source("./src/calculate_nsbeta_mixture_model_cdf.R")
source("./src/dichotomy.R")
calculate_nsbeta_mixture_model_inverse_cdf <- function(p,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[1],
iterations = 100){
# p: vector of probabilities
# weights: vector of weights
# lowers, uppers: vectors of lower and upper bound
# shapes1, shapes2: vectors of location and scale parameters of the considered distributions
# The vectors of parameters shape1st have the same number of elements
# iterations: number of iterations to perform in the the dichotomy algorithm
if (is.element(el = kind, set = c("geometric", "arithmetic"))){
output <- sapply(p, function(p){
# define the nonlinear equation to solve
nle <- function(q){
f <- -p + calculate_nsbeta_mixture_model_cdf(q = q,
shapes1 = shapes1,
shapes2 = shapes2,
lowers = lowers,
uppers = uppers,
weights = weights,
kind = kind)
f
}
# get the positions where weights are different from zero
position_weights_nonzero <- which(weights > 0)
# extract all parameters for which weights are different from zero
shapes1 <- shapes1[position_weights_nonzero]
shapes2 <- shapes2[position_weights_nonzero]
weights <- weights[position_weights_nonzero]
# calculates some initial guesses for the root of the nonlinear equation to solve
q_initial_guesses <- sapply(1:length(weights), function(j) extraDistr::qnsbeta(p = p,
shape1 = shapes1[j],
shape2 = shapes2[j]))
# estimate the root of the nonlinear equation to solve
answer <- dichotomy(func = nle, a = min(q_initial_guesses), b = max(q_initial_guesses), n = iterations)
answer
})
}
else{
stop("Please enter a correct value to the argument 'kind'. Possible values are 'geometric' or 'arithmetic'!")
}
output
}
m <- 3
weights <- as.numeric(extraDistr::rdirichlet(n = 1, alpha = rep(1, times = m)))
m <- 3
weights <- as.numeric(extraDistr::rdirichlet(n = 1, alpha = rep(1, times = m)))
shapes2 <- c(3, 2, 1)
shapes1 <- c(1, 2, 3)
lowers <- rep(0, times = p)
uppers <- rep(1, times = p)
p <- seq(from = 0.01, to = 0.09, length.out = 9)
results <- calculate_nsbeta_mixture_model_inverse_cdf(p = p,
shapes1,
shapes2,
lowers,
uppers,
weights,
iterations = 100,
kind = c("geometric", "arithmetic")[1])
results
calculate_nsbeta_mixture_model_cdf(q = results,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[1])
p
results <- calculate_nsbeta_mixture_model_inverse_cdf(p = p,
shapes1,
shapes2,
lowers,
uppers,
weights,
iterations = 100,
kind = c("geometric", "arithmetic")[2])
results
calculate_nsbeta_mixture_model_cdf(q = results,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[2])
p
results <- calculate_nsbeta_mixture_model_inverse_cdf(p = p,
shapes1,
shapes2,
lowers,
uppers,
weights,
iterations = 100,
kind = "mix")
m <- 3
weights <- as.numeric(extraDistr::rdirichlet(n = 1, alpha = rep(1, times = m)))
weights
m <- 3
weights <- as.numeric(extraDistr::rdirichlet(n = 1, alpha = rep(1, times = m)))
weights
shapes2 <- c(3, 2, 1)
shapes1 <- c(1, 2, 3)
lowers <- rep(0, times = p)
uppers <- rep(1, times = p)
p <- seq(from = 0.90, to = 0.99, length.out = 10)
results <- calculate_nsbeta_mixture_model_inverse_cdf(p = p,
shapes1,
shapes2,
lowers,
uppers,
weights,
iterations = 100,
kind = c("geometric", "arithmetic")[1])
results
calculate_nsbeta_mixture_model_cdf(q = results,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[1])
p
results <- calculate_nsbeta_mixture_model_inverse_cdf(p = p,
shapes1,
shapes2,
lowers,
uppers,
weights,
iterations = 100,
kind = c("geometric", "arithmetic")[2])
results
calculate_nsbeta_mixture_model_cdf(q = results,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[2])
p
results <- calculate_nsbeta_mixture_model_inverse_cdf(p = p,
shapes1,
shapes2,
lowers,
uppers,
weights,
iterations = 100,
kind = "mix")
calculate_nsbeta_mixture_model_inverse_cdf <- function(p,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[1],
iterations = 100){
# p: vector of probabilities
# weights: vector of weights
# lowers, uppers: vectors of lower and upper bound
# shapes1, shapes2: vectors of location and scale parameters of the considered distributions
# The vectors of parameters shape1st have the same number of elements
# iterations: number of iterations to perform in the the dichotomy algorithm
if (is.element(el = kind, set = c("geometric", "arithmetic"))){
output <- sapply(p, function(p){
# define the nonlinear equation to solve
nle <- function(q){
f <- -p + calculate_nsbeta_mixture_model_cdf(q = q,
shapes1 = shapes1,
shapes2 = shapes2,
lowers = lowers,
uppers = uppers,
weights = weights,
kind = kind)
f
}
# get the positions where weights are different from zero
position_weights_nonzero <- which(weights > 0)
# extract all parameters for which weights are different from zero
shapes1 <- shapes1[position_weights_nonzero]
shapes2 <- shapes2[position_weights_nonzero]
weights <- weights[position_weights_nonzero]
# calculates some initial guesses for the root of the nonlinear equation to solve
q_initial_guesses <- sapply(1:length(weights), function(j) extraDistr::qnsbeta(p = p,
shape1 = shapes1[j],
shape2 = shapes2[j],
min = lowers[j],
max = uppers[j]))
# estimate the root of the nonlinear equation to solve
answer <- dichotomy(func = nle, a = min(q_initial_guesses), b = max(q_initial_guesses), n = iterations)
answer
})
}
else{
stop("Please enter a correct value to the argument 'kind'. Possible values are 'geometric' or 'arithmetic'!")
}
output
}
source("./src/calculate_nsbeta_mixture_model_inverse_cdf.R")
generate_nsbeta_mixture_model_sample <- function(n = 1,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[1]){
# n: number of observations to generate
# weights: vector of weights
# lowers, uppers: vectors of lower and upper bound
# shapes1, shapes2: vectors of location and scale parameters of the considered distributions
# The vectors of parameters shape1st have the same number of elements
# kind: indicates the type of mixture model. Possible values are "geometric" or "arithmetic"
if (kind == "arithmetic"){
output <- sapply(1:n, function(j){
k <- sample(x = 1:length(weights),
size = 1,
replace = FALSE,
prob = weights)
out <- extraDistr::rnsbeta(n = 1,
shape1 = shapes1[k],
shape2 = shapes2[k],
min = lowers[k],
max = uppers[k])
out
})
}
else if (kind == "geometric"){
output <- sapply(1:n, function(j){
out <- sapply(1:length(weights), function(k){
power_random_variates <- exp(-rexp(n = 1, rate = weights[k]))
random_value <- extraDistr::qnsbeta(p = power_random_variates,
shape1 = shapes1[k],
shape2 = shapes2[k],
min = lowers[k],
max = uppers[k])
random_value
})
max(out)
})
}
else{
stop("Please enter a correct value to the argument 'kind'. Possible values are 'geometric' or 'arithmetic'!")
}
output
}
source("./src/calculate_nsbeta_mixture_model_pdf.R")
weights <- c(0.5, 0.5)
shapes2 <- c(2, 3)
shapes1 <- c(5, 2)
shapes1 <- c(5, 2)
lowers <- c(0, 0)
uppers <- c(1, 1)
n <- 10000
results_1 <- generate_nsbeta_mixture_model_sample(n = n,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[2])
pdf_1 <- calculate_nsbeta_mixture_model_pdf(x = sort(results_1),
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[2])
density_1 <- density(results_1)
support_density_1 <- density_1$x
value_density_1 <- density_1$y
hist(x = results_1,
freq = FALSE,
ylim = range(c(value_density_1, pdf_1)),
ylab = "density",
xlab = "support",
main = "mixture model density plot")
lines(x = support_density_1, y = value_density_1, col = 1, lwd = 2)
lines(x = sort(results_1), y = pdf_1, col = 4, lwd = 2)
legend("topleft", legend = c("empirical", "theoretical"), col = c(1, 4), lty = c(1, 1))
results_2 <- generate_nsbeta_mixture_model_sample(n = n,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[1])
pdf_2 <- calculate_nsbeta_mixture_model_pdf(x = sort(results_2),
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[1])
density_2 <- density(results_2)
support_density_2 <- density_2$x
value_density_2 <- density_2$y
hist(x = results_2,
freq = FALSE,
ylim = range(c(value_density_2, pdf_2)),
ylab = "density",
xlab = "support",
main = "mixture model density plot")
lines(x = support_density_2, y = value_density_2, col = 1, lwd = 2)
lines(x = sort(results_2), y = pdf_2, col = 4, lwd = 2)
legend("topleft", legend = c("empirical", "theoretical"), col = c(1, 4), lty = c(1, 1))
plot(x = sort(results_1),
y = pdf_1,
type = "l",
col = 7,
lwd = 2,
ylim = range(c(pdf_1, pdf_2)),
xlim = range(c(results_1, results_2)),
xlab = "support",
ylab = "density",
main = "mixture model density plot")
lines(x = sort(results_2), y  = pdf_2, type = "l", col = 6, lwd = 2)
legend("topleft", legend = c("arithmetic", "geometric"), col = c(7, 6), lty = c(1, 1))
results <- generate_nsbeta_mixture_model_sample(n = n,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = "merge")
source("./src/calculate_nsbeta_mixture_model_pdf.R")
weights <- c(1/3, 1/3, 1/3)
shapes2 <- c(2, 3, 2)
shapes1 <- c(5, 2, 1)
lowers <- c(0, 0, 0)
uppers <- c(1, 1, 1)
n <- 10000
results_1 <- generate_nsbeta_mixture_model_sample(n = n,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[2])
pdf_1 <- calculate_nsbeta_mixture_model_pdf(x = sort(results_1),
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[2])
density_1 <- density(results_1)
support_density_1 <- density_1$x
value_density_1 <- density_1$y
hist(x = results_1,
freq = FALSE,
ylim = range(c(value_density_1, pdf_1)),
ylab = "density",
xlab = "support",
main = "mixture model density plot")
lines(x = support_density_1, y = value_density_1, col = 1, lwd = 2)
lines(x = sort(results_1), y = pdf_1, col = 4, lwd = 2)
legend("topleft", legend = c("empirical", "theoretical"), col = c(1, 4), lty = c(1, 1))
results_2 <- generate_nsbeta_mixture_model_sample(n = n,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[1])
pdf_2 <- calculate_nsbeta_mixture_model_pdf(x = sort(results_2),
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = c("geometric", "arithmetic")[1])
density_2 <- density(results_2)
support_density_2 <- density_2$x
value_density_2 <- density_2$y
hist(x = results_2,
freq = FALSE,
ylim = range(c(value_density_2, pdf_2)),
ylab = "density",
xlab = "support",
main = "mixture model density plot")
lines(x = support_density_2, y = value_density_2, col = 1, lwd = 2)
lines(x = sort(results_2), y = pdf_2, col = 4, lwd = 2)
legend("topleft", legend = c("empirical", "theoretical"), col = c(1, 4), lty = c(1, 1))
plot(x = sort(results_1),
y = pdf_1,
type = "l",
col = 7,
lwd = 2,
ylim = range(c(pdf_1, pdf_2)),
xlim = range(c(results_1, results_2)),
xlab = "support",
ylab = "density",
main = "mixture model density plot")
lines(x = sort(results_2), y  = pdf_2, type = "l", col = 6, lwd = 2)
legend("topleft", legend = c("arithmetic", "geometric"), col = c(7, 6), lty = c(1, 1))
results <- generate_nsbeta_mixture_model_sample(n = n,
shapes1,
shapes2,
lowers,
uppers,
weights,
kind = "merge")
